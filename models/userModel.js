const mongoose = require('mongoose');
const validator = require('validator');
const bcrypt = require('bcryptjs');
const crypto = require('crypto'); //inbuilt. hence no need to install it

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Please tell us your name! '],
  },
  email: {
    type: String,
    required: [true, 'Please provide your email'],
    unique: true,
    lowercase: true,
    validator: [validator.isEmail, 'please provide a valid email'],
  },
  role: {
    type: String,
    enum: ['user', 'guide', 'lead-guide', 'admin'],
    default: 'user',
  },
  photo: {
    type: String,
    default: 'default.jpg'
  },
  password: {
    type: String,
    required: [true, 'Please provide a password'],
    minlength: 8,
    select: false,
  },
  passwordConfirm: {
    type: String,
    required: [true, 'Please confirm your password'],
    validate: {
      //this only works on create and save
      validator: function (el) {
        return el === this.password;
      },
      message: 'Password is not same',
    },
  },

  passwordChangedAt: Date,
  passwordResetToken: String, //this is not same as jwt token. this is generated by us
  passwordResetExpires: Date,

  active : {
    type: Boolean,
    default: true,
    select : false
  }
});

userSchema.pre('save', async function (next) {
  //run only if the password was actually modified (the code below)
  //PS: while creating a new user the 'password' field is considered modified because it's being set for the first time.
  if (!this.isModified('password')) return next(); //using updateuser method

  //hash the password with the cost of 122
  this.password = await bcrypt.hash(this.password, 12);

  //delete confirmPassword field
  this.passwordConfirm = undefined;
  next();
});



userSchema.pre('save', function(next){
  if(!this.isModified('password') || this.isNew) return next()


    this.passwordChangedAt = Date.now() - 1000 //sometimes the jwt token created bit before this time stamp. hence we subtract 1 sec 

    next()
  
})


userSchema.pre(/^find/, function(next){   //this middleware will not show all the users which have active is false
  this.find({active : {$ne : false}})
  next()
})


//compares the password

userSchema.methods.correctPassword = async function (
  candidatePassword,
  userPassword
) {
  //compare returns a promise
  return await bcrypt.compare(candidatePassword, userPassword);  //this is used to make login request slow
};




userSchema.methods.passwordChangedAfter = function (JWTTimestamp) {
  if (this.passwordChangedAt) {
    //console.log(this.passwordChangedAt)
    const changedTimeStamp = parseInt(
      this.passwordChangedAt.getTime() / 1000,
      10
    );
    //console.log(changedTimeStamp, JWTTimestamp);

    return JWTTimestamp < changedTimeStamp; //if password changed after jwt token is issued, the user is logged out
  }

  //FALSE MEANS NOT CHANGED
  return false;
};

userSchema.methods.createPasswordResetToken = function () {
  const resetToken = crypto.randomBytes(32).toString('hex'); //password reset token created. this is not same as jwt

  this.passwordResetToken = crypto
    .createHash('sha256')
    .update(resetToken)
    .digest('hex'); //reset token encrypted and this will be saved to database

    //console.log({resetToken}, this.passwordResetToken)
  
  this.passwordResetExpires = Date.now() + 10*60*1000 //10 mins 

  //here we didn't create a new field while creating a new user. we modified it. hence we need to save it
  
  return resetToken 
};

const User = mongoose.model('User', userSchema);
module.exports = User;
